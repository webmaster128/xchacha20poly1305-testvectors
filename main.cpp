#include <sodium.h>

#include <chrono>
#include <string>
#include <vector>
#include <iostream>
#include <iomanip>
#include <stdexcept>

#ifndef SIZE
#define SIZE 99
#endif

namespace {
    void print_array(unsigned char data[], size_t data_length) {
        for(int i = 0; i < data_length; ++i) {
            std::cout << std::hex << std::setw(2) << std::setfill('0') << (int) data[i];
        }
    }

    void print_vector(std::vector<unsigned char> data) {
        print_array(data.data(), data.size());
    }
}

const auto messages = std::vector<std::vector<unsigned char>>{
#if SIZE >= 1
  std::vector<unsigned char>{},
  std::vector<unsigned char>{0},
  std::vector<unsigned char>{123},
  std::vector<unsigned char>{255},
#endif
#if SIZE >= 2
  std::vector<unsigned char>{0, 0},
  std::vector<unsigned char>{123, 123},
  std::vector<unsigned char>{255, 255},

  // block size - 1 (63)
  std::vector<unsigned char>{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  std::vector<unsigned char>{123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123},
  std::vector<unsigned char>{255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},

  // block size (64)
  std::vector<unsigned char>{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  std::vector<unsigned char>{123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123},
  std::vector<unsigned char>{255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},

  // block size + 1 (65)
  std::vector<unsigned char>{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  std::vector<unsigned char>{123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123},
  std::vector<unsigned char>{255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},
#endif
#if SIZE >= 3
  std::vector<unsigned char>{0, 0, 0},
  std::vector<unsigned char>{123, 123, 123},
  std::vector<unsigned char>{255, 255, 255},
  std::vector<unsigned char>{0, 0, 0, 0},
  std::vector<unsigned char>{123, 123, 123, 123},
  std::vector<unsigned char>{255, 255, 255, 255},
  std::vector<unsigned char>{0, 0, 0, 0, 0},
  std::vector<unsigned char>{123, 123, 123, 123, 123},
  std::vector<unsigned char>{255, 255, 255, 255, 255},
  std::vector<unsigned char>{0, 0, 0, 0, 0, 0},
  std::vector<unsigned char>{123, 123, 123, 123, 123, 123},
  std::vector<unsigned char>{255, 255, 255, 255, 255, 255},
  std::vector<unsigned char>{0, 0, 0, 0, 0, 0, 0},
  std::vector<unsigned char>{123, 123, 123, 123, 123, 123, 123},
  std::vector<unsigned char>{255, 255, 255, 255, 255, 255, 255},
  std::vector<unsigned char>{0, 0, 0, 0, 0, 0, 0, 0},
  std::vector<unsigned char>{123, 123, 123, 123, 123, 123, 123, 123},
  std::vector<unsigned char>{255, 255, 255, 255, 255, 255, 255, 255},
  std::vector<unsigned char>{0, 0, 0, 0, 0, 0, 0, 0, 0},
  std::vector<unsigned char>{123, 123, 123, 123, 123, 123, 123, 123, 123},
  std::vector<unsigned char>{255, 255, 255, 255, 255, 255, 255, 255, 255},
  std::vector<unsigned char>{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  std::vector<unsigned char>{123, 123, 123, 123, 123, 123, 123, 123, 123, 123},
  std::vector<unsigned char>{255, 255, 255, 255, 255, 255, 255, 255, 255, 255},
#endif
#if SIZE >= 4
  // python -c 'import random; print([random.randint(0,255) for _ in range(345)])'
  std::vector<unsigned char>{152, 37, 39, 139, 199, 114, 210, 167, 112, 167, 110, 180, 93, 0, 147, 115, 153, 55, 56, 54, 68, 58, 86, 152, 30, 27, 60, 118, 38, 133, 95, 168, 96, 20, 1, 59, 174, 244, 114, 161, 148, 144, 252, 161, 250, 32, 133, 209, 184, 108, 183, 18, 159, 113, 71, 78, 228, 44, 234, 112, 205, 108, 17, 107, 197, 247, 213, 170, 242, 193, 156, 132, 31, 34, 176, 71, 243, 176, 81, 134, 129, 113, 112, 211, 6, 193, 182, 230, 84, 240, 223, 30, 230, 189, 152, 203, 190, 230, 119, 250, 125, 124, 6, 53, 205, 103, 153, 13, 206, 195, 96, 165, 76, 14, 135, 244, 47, 201, 243, 210, 56, 133, 131, 160, 27, 160, 85, 39, 31, 249, 28, 157, 242, 245, 104, 47, 240, 238, 69, 61, 200, 165, 96, 191, 159, 168, 42, 23, 81, 241, 88, 112, 200, 53, 67, 218, 149, 90, 177, 110, 155, 40, 124, 251, 137, 197, 242, 5, 112, 212, 60, 22, 212, 71, 171, 95, 142, 87, 75, 194, 19, 0, 71, 48, 230, 172, 149, 15, 213, 14, 157, 12, 153, 56, 148, 221, 13, 131, 0, 37, 113, 79, 22, 186, 225, 106, 204, 21, 13, 10, 254, 181, 72, 179, 115, 225, 185, 197, 89, 129, 232, 89, 227, 97, 157, 125, 230, 212, 119, 77, 158, 121, 129, 144, 93, 223, 83, 64, 152, 189, 120, 33, 247, 164, 148, 137, 249, 203, 133, 174, 29, 194, 248, 126, 173, 181, 236, 45, 127, 238, 221, 246, 78, 11, 85, 92, 112, 26, 169, 137, 92, 119, 244, 139, 96, 38, 228, 48, 36, 195, 129, 44, 163, 199, 107, 104, 88, 11, 194, 173, 81, 46, 31, 30, 235, 216, 19, 55, 207, 195, 63, 84, 174, 135, 108, 94, 167, 173, 110, 98, 98, 85, 34, 24, 235, 134, 130, 78, 6, 95, 39, 249, 130, 24, 242, 202, 176, 222, 2, 193, 139, 142, 33, 156, 0, 23, 75, 186, 119, 105, 50, 255, 220, 147, 77},
  // python -c 'import random; print([random.randint(0,255) for _ in range(564)])'
  std::vector<unsigned char>{120, 191, 116, 84, 228, 153, 41, 17, 124, 185, 193, 143, 105, 62, 73, 98, 75, 79, 46, 9, 221, 58, 185, 176, 108, 43, 18, 99, 171, 15, 109, 102, 193, 171, 240, 58, 107, 227, 63, 228, 52, 139, 234, 194, 185, 200, 155, 191, 85, 187, 1, 49, 133, 0, 19, 123, 145, 14, 177, 144, 242, 173, 89, 102, 132, 54, 100, 159, 2, 169, 145, 47, 8, 136, 105, 89, 195, 153, 178, 120, 45, 231, 30, 40, 213, 80, 123, 111, 104, 217, 14, 234, 144, 93, 54, 41, 107, 175, 74, 255, 21, 178, 125, 131, 28, 90, 38, 161, 158, 48, 244, 159, 14, 158, 225, 74, 31, 149, 252, 160, 1, 211, 183, 192, 1, 71, 118, 73, 37, 211, 211, 4, 6, 164, 192, 247, 101, 172, 145, 22, 39, 201, 17, 161, 9, 142, 108, 120, 208, 105, 76, 191, 164, 106, 191, 165, 23, 123, 65, 194, 132, 84, 178, 88, 203, 22, 208, 184, 237, 3, 211, 75, 202, 200, 184, 81, 161, 254, 150, 74, 24, 145, 76, 139, 99, 6, 68, 176, 127, 92, 172, 186, 225, 214, 55, 210, 19, 77, 121, 147, 168, 135, 75, 18, 116, 29, 208, 95, 11, 104, 93, 25, 166, 91, 68, 209, 67, 139, 162, 246, 200, 117, 233, 235, 26, 135, 244, 97, 242, 46, 143, 244, 191, 172, 139, 87, 157, 77, 242, 53, 167, 18, 238, 90, 207, 139, 49, 28, 52, 73, 11, 197, 60, 114, 162, 220, 246, 227, 177, 228, 32, 202, 31, 104, 206, 108, 236, 89, 34, 0, 198, 195, 111, 225, 190, 191, 136, 210, 136, 177, 30, 160, 138, 219, 138, 12, 96, 7, 252, 254, 49, 244, 62, 141, 178, 171, 58, 3, 172, 134, 63, 52, 46, 250, 237, 197, 45, 82, 79, 189, 185, 202, 186, 181, 118, 94, 58, 56, 60, 72, 253, 127, 214, 235, 48, 167, 95, 253, 196, 95, 117, 94, 146, 195, 35, 162, 194, 186, 223, 188, 67, 38, 173, 128, 51, 42, 56, 104, 52, 37, 71, 154, 44, 62, 255, 126, 247, 148, 61, 162, 148, 254, 56, 65, 30, 14, 128, 88, 233, 27, 189, 136, 124, 163, 97, 144, 7, 138, 169, 33, 192, 28, 55, 127, 126, 36, 127, 164, 221, 182, 69, 171, 242, 187, 2, 163, 71, 106, 170, 240, 111, 15, 253, 142, 224, 202, 131, 23, 117, 92, 163, 100, 20, 136, 218, 10, 110, 104, 154, 29, 214, 24, 5, 111, 80, 180, 117, 198, 217, 101, 204, 182, 254, 148, 52, 108, 145, 122, 248, 64, 56, 251, 26, 113, 162, 168, 7, 237, 105, 62, 148, 68, 232, 47, 172, 112, 186, 62, 94, 154, 14, 128, 135, 212, 57, 85, 155, 18, 152, 243, 65, 102, 243, 100, 209, 98, 200, 224, 21, 38, 67, 61, 241, 208, 250, 198, 22, 144, 98, 140, 189, 5, 212, 50, 174, 143, 150, 21, 196, 83, 71, 201, 195, 157, 222, 233, 253, 165, 230, 24, 116, 86, 46, 220, 4, 49, 231, 100, 162, 153, 198, 0, 99, 139, 84, 9, 192, 44, 129, 156, 81, 253, 203, 92, 254, 30, 219, 225, 83, 66, 67, 94, 57, 225, 140, 96, 186, 34, 30, 103, 25, 206, 175, 148, 193, 173, 250, 91, 105, 139, 165, 185, 51, 113},
  // python -c 'import random; print([random.randint(0,255) for _ in range(798)])'
  std::vector<unsigned char>{45, 25, 218, 184, 186, 212, 50, 206, 145, 199, 220, 59, 245, 30, 107, 149, 251, 191, 110, 42, 133, 1, 41, 98, 252, 21, 219, 101, 151, 148, 152, 214, 96, 146, 103, 232, 139, 243, 169, 191, 185, 253, 216, 214, 14, 93, 221, 70, 9, 4, 92, 248, 131, 30, 23, 39, 156, 42, 94, 136, 228, 56, 208, 174, 204, 108, 178, 94, 165, 178, 166, 206, 97, 166, 91, 92, 130, 126, 244, 19, 156, 221, 66, 5, 193, 196, 17, 100, 252, 9, 5, 238, 244, 99, 46, 56, 195, 208, 12, 32, 59, 138, 119, 129, 58, 40, 43, 79, 95, 109, 77, 4, 249, 241, 174, 160, 26, 0, 152, 197, 34, 141, 72, 121, 245, 207, 144, 159, 159, 206, 49, 94, 63, 206, 47, 243, 237, 167, 38, 89, 120, 31, 51, 54, 0, 13, 107, 155, 133, 40, 89, 10, 237, 31, 55, 128, 241, 111, 94, 96, 72, 57, 12, 245, 179, 90, 193, 206, 20, 120, 117, 24, 83, 25, 228, 177, 123, 46, 2, 72, 198, 109, 24, 49, 155, 173, 217, 81, 108, 156, 84, 168, 1, 97, 9, 186, 224, 20, 45, 81, 105, 121, 72, 98, 85, 172, 36, 77, 60, 97, 13, 101, 113, 98, 47, 219, 114, 68, 128, 101, 26, 231, 243, 133, 43, 214, 11, 56, 11, 206, 71, 82, 128, 34, 62, 98, 92, 186, 104, 45, 238, 77, 52, 86, 16, 138, 65, 247, 156, 143, 8, 71, 26, 211, 160, 209, 235, 76, 234, 158, 69, 207, 87, 38, 52, 111, 107, 84, 204, 166, 225, 169, 78, 163, 204, 100, 55, 85, 73, 182, 227, 26, 36, 127, 6, 164, 208, 7, 254, 252, 3, 202, 16, 164, 142, 189, 112, 201, 115, 12, 254, 123, 245, 188, 32, 152, 160, 236, 225, 172, 222, 115, 35, 124, 201, 13, 164, 122, 35, 181, 152, 16, 33, 143, 40, 6, 4, 157, 86, 137, 116, 108, 184, 162, 219, 149, 62, 225, 19, 88, 143, 19, 233, 115, 36, 239, 237, 43, 178, 100, 119, 117, 96, 107, 208, 164, 21, 233, 250, 134, 227, 8, 140, 165, 68, 201, 45, 181, 232, 144, 86, 218, 16, 128, 9, 111, 224, 62, 63, 208, 99, 36, 198, 155, 240, 65, 178, 149, 63, 136, 176, 50, 178, 147, 119, 66, 69, 195, 147, 140, 44, 24, 235, 168, 99, 41, 35, 209, 110, 28, 57, 217, 53, 189, 172, 210, 180, 222, 146, 211, 102, 23, 220, 2, 4, 151, 29, 209, 161, 20, 145, 20, 129, 50, 79, 11, 44, 229, 145, 129, 48, 92, 137, 100, 21, 244, 160, 7, 37, 4, 170, 159, 223, 190, 190, 16, 186, 5, 112, 175, 85, 210, 131, 9, 62, 189, 215, 3, 124, 89, 107, 222, 181, 188, 229, 170, 1, 10, 178, 244, 168, 2, 104, 15, 10, 172, 224, 207, 210, 241, 128, 157, 64, 109, 198, 220, 26, 38, 249, 178, 96, 56, 27, 67, 164, 121, 10, 117, 100, 72, 181, 40, 109, 148, 45, 126, 69, 76, 128, 62, 204, 83, 44, 42, 9, 79, 19, 137, 171, 198, 218, 125, 3, 82, 45, 94, 183, 74, 19, 140, 243, 152, 200, 139, 190, 203, 70, 165, 169, 91, 100, 79, 51, 206, 193, 10, 206, 162, 203, 17, 225, 236, 177, 98, 218, 233, 228, 104, 21, 190, 90, 3, 91, 8, 207, 65, 13, 107, 51, 48, 165, 199, 118, 61, 31, 44, 233, 192, 222, 56, 59, 228, 219, 210, 166, 248, 203, 129, 160, 5, 69, 43, 134, 147, 112, 206, 245, 226, 173, 144, 222, 90, 85, 130, 82, 244, 147, 126, 136, 98, 141, 68, 61, 88, 92, 211, 158, 114, 9, 189, 128, 180, 118, 231, 0, 155, 43, 163, 112, 217, 66, 148, 197, 145, 224, 99, 180, 120, 224, 14, 211, 55, 195, 234, 47, 118, 175, 158, 97, 5, 145, 40, 36, 219, 111, 183, 101, 20, 26, 48, 234, 17, 136, 103, 231, 188, 71, 40, 207, 164, 109, 247, 106, 246, 177, 90, 199, 160, 198, 33, 32, 244, 162, 23, 143, 236, 152, 236, 123, 29, 252, 188, 209, 156, 174, 109, 44, 75, 198, 100, 152, 244, 138, 209, 147, 218, 199, 200, 30, 50, 92, 191, 235, 39, 181, 100, 25, 32, 247, 70, 216, 5, 227, 231, 168, 252, 200, 166, 186, 123, 115, 104, 111, 225, 26, 207, 224, 190, 49, 32, 171, 158, 21, 74, 135, 144, 100, 174, 242, 112, 7, 204, 154, 31, 189, 239, 141, 29, 241, 62, 217, 92, 40, 23, 155, 138, 251, 204, 159, 53, 246, 127, 53, 250, 22, 143, 213, 25, 162, 142, 109, 239, 171, 90, 49, 90, 140, 33},
#endif
};

const auto additional_datas = std::vector<std::vector<unsigned char>>{
#if SIZE >= 1
  std::vector<unsigned char>{},
  std::vector<unsigned char>{0},
  std::vector<unsigned char>{123},
  std::vector<unsigned char>{255},
#endif
#if SIZE >= 2
  std::vector<unsigned char>{0, 0},
  std::vector<unsigned char>{123, 123},
  std::vector<unsigned char>{255, 255},
#endif
#if SIZE >= 3
  std::vector<unsigned char>{0, 0, 0},
  std::vector<unsigned char>{123, 123, 123},
  std::vector<unsigned char>{255, 255, 255},
  std::vector<unsigned char>{0, 0, 0, 0},
  std::vector<unsigned char>{123, 123, 123, 123},
  std::vector<unsigned char>{255, 255, 255, 255},
  std::vector<unsigned char>{0, 0, 0, 0, 0},
  std::vector<unsigned char>{123, 123, 123, 123, 123},
  std::vector<unsigned char>{255, 255, 255, 255, 255},
  std::vector<unsigned char>{0, 0, 0, 0, 0, 0},
  std::vector<unsigned char>{123, 123, 123, 123, 123, 123},
  std::vector<unsigned char>{255, 255, 255, 255, 255, 255},
  std::vector<unsigned char>{0, 0, 0, 0, 0, 0, 0},
  std::vector<unsigned char>{123, 123, 123, 123, 123, 123, 123},
  std::vector<unsigned char>{255, 255, 255, 255, 255, 255, 255},
  std::vector<unsigned char>{0, 0, 0, 0, 0, 0, 0, 0},
  std::vector<unsigned char>{123, 123, 123, 123, 123, 123, 123, 123},
  std::vector<unsigned char>{255, 255, 255, 255, 255, 255, 255, 255},
  std::vector<unsigned char>{0, 0, 0, 0, 0, 0, 0, 0, 0},
  std::vector<unsigned char>{123, 123, 123, 123, 123, 123, 123, 123, 123},
  std::vector<unsigned char>{255, 255, 255, 255, 255, 255, 255, 255, 255},
  std::vector<unsigned char>{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  std::vector<unsigned char>{123, 123, 123, 123, 123, 123, 123, 123, 123, 123},
  std::vector<unsigned char>{255, 255, 255, 255, 255, 255, 255, 255, 255, 255},
#endif
#if SIZE >= 4
  // python -c 'import random; print([random.randint(0,255) for _ in range(345)])'
  std::vector<unsigned char>{152, 37, 39, 139, 199, 114, 210, 167, 112, 167, 110, 180, 93, 0, 147, 115, 153, 55, 56, 54, 68, 58, 86, 152, 30, 27, 60, 118, 38, 133, 95, 168, 96, 20, 1, 59, 174, 244, 114, 161, 148, 144, 252, 161, 250, 32, 133, 209, 184, 108, 183, 18, 159, 113, 71, 78, 228, 44, 234, 112, 205, 108, 17, 107, 197, 247, 213, 170, 242, 193, 156, 132, 31, 34, 176, 71, 243, 176, 81, 134, 129, 113, 112, 211, 6, 193, 182, 230, 84, 240, 223, 30, 230, 189, 152, 203, 190, 230, 119, 250, 125, 124, 6, 53, 205, 103, 153, 13, 206, 195, 96, 165, 76, 14, 135, 244, 47, 201, 243, 210, 56, 133, 131, 160, 27, 160, 85, 39, 31, 249, 28, 157, 242, 245, 104, 47, 240, 238, 69, 61, 200, 165, 96, 191, 159, 168, 42, 23, 81, 241, 88, 112, 200, 53, 67, 218, 149, 90, 177, 110, 155, 40, 124, 251, 137, 197, 242, 5, 112, 212, 60, 22, 212, 71, 171, 95, 142, 87, 75, 194, 19, 0, 71, 48, 230, 172, 149, 15, 213, 14, 157, 12, 153, 56, 148, 221, 13, 131, 0, 37, 113, 79, 22, 186, 225, 106, 204, 21, 13, 10, 254, 181, 72, 179, 115, 225, 185, 197, 89, 129, 232, 89, 227, 97, 157, 125, 230, 212, 119, 77, 158, 121, 129, 144, 93, 223, 83, 64, 152, 189, 120, 33, 247, 164, 148, 137, 249, 203, 133, 174, 29, 194, 248, 126, 173, 181, 236, 45, 127, 238, 221, 246, 78, 11, 85, 92, 112, 26, 169, 137, 92, 119, 244, 139, 96, 38, 228, 48, 36, 195, 129, 44, 163, 199, 107, 104, 88, 11, 194, 173, 81, 46, 31, 30, 235, 216, 19, 55, 207, 195, 63, 84, 174, 135, 108, 94, 167, 173, 110, 98, 98, 85, 34, 24, 235, 134, 130, 78, 6, 95, 39, 249, 130, 24, 242, 202, 176, 222, 2, 193, 139, 142, 33, 156, 0, 23, 75, 186, 119, 105, 50, 255, 220, 147, 77},
  // python -c 'import random; print([random.randint(0,255) for _ in range(564)])'
  std::vector<unsigned char>{120, 191, 116, 84, 228, 153, 41, 17, 124, 185, 193, 143, 105, 62, 73, 98, 75, 79, 46, 9, 221, 58, 185, 176, 108, 43, 18, 99, 171, 15, 109, 102, 193, 171, 240, 58, 107, 227, 63, 228, 52, 139, 234, 194, 185, 200, 155, 191, 85, 187, 1, 49, 133, 0, 19, 123, 145, 14, 177, 144, 242, 173, 89, 102, 132, 54, 100, 159, 2, 169, 145, 47, 8, 136, 105, 89, 195, 153, 178, 120, 45, 231, 30, 40, 213, 80, 123, 111, 104, 217, 14, 234, 144, 93, 54, 41, 107, 175, 74, 255, 21, 178, 125, 131, 28, 90, 38, 161, 158, 48, 244, 159, 14, 158, 225, 74, 31, 149, 252, 160, 1, 211, 183, 192, 1, 71, 118, 73, 37, 211, 211, 4, 6, 164, 192, 247, 101, 172, 145, 22, 39, 201, 17, 161, 9, 142, 108, 120, 208, 105, 76, 191, 164, 106, 191, 165, 23, 123, 65, 194, 132, 84, 178, 88, 203, 22, 208, 184, 237, 3, 211, 75, 202, 200, 184, 81, 161, 254, 150, 74, 24, 145, 76, 139, 99, 6, 68, 176, 127, 92, 172, 186, 225, 214, 55, 210, 19, 77, 121, 147, 168, 135, 75, 18, 116, 29, 208, 95, 11, 104, 93, 25, 166, 91, 68, 209, 67, 139, 162, 246, 200, 117, 233, 235, 26, 135, 244, 97, 242, 46, 143, 244, 191, 172, 139, 87, 157, 77, 242, 53, 167, 18, 238, 90, 207, 139, 49, 28, 52, 73, 11, 197, 60, 114, 162, 220, 246, 227, 177, 228, 32, 202, 31, 104, 206, 108, 236, 89, 34, 0, 198, 195, 111, 225, 190, 191, 136, 210, 136, 177, 30, 160, 138, 219, 138, 12, 96, 7, 252, 254, 49, 244, 62, 141, 178, 171, 58, 3, 172, 134, 63, 52, 46, 250, 237, 197, 45, 82, 79, 189, 185, 202, 186, 181, 118, 94, 58, 56, 60, 72, 253, 127, 214, 235, 48, 167, 95, 253, 196, 95, 117, 94, 146, 195, 35, 162, 194, 186, 223, 188, 67, 38, 173, 128, 51, 42, 56, 104, 52, 37, 71, 154, 44, 62, 255, 126, 247, 148, 61, 162, 148, 254, 56, 65, 30, 14, 128, 88, 233, 27, 189, 136, 124, 163, 97, 144, 7, 138, 169, 33, 192, 28, 55, 127, 126, 36, 127, 164, 221, 182, 69, 171, 242, 187, 2, 163, 71, 106, 170, 240, 111, 15, 253, 142, 224, 202, 131, 23, 117, 92, 163, 100, 20, 136, 218, 10, 110, 104, 154, 29, 214, 24, 5, 111, 80, 180, 117, 198, 217, 101, 204, 182, 254, 148, 52, 108, 145, 122, 248, 64, 56, 251, 26, 113, 162, 168, 7, 237, 105, 62, 148, 68, 232, 47, 172, 112, 186, 62, 94, 154, 14, 128, 135, 212, 57, 85, 155, 18, 152, 243, 65, 102, 243, 100, 209, 98, 200, 224, 21, 38, 67, 61, 241, 208, 250, 198, 22, 144, 98, 140, 189, 5, 212, 50, 174, 143, 150, 21, 196, 83, 71, 201, 195, 157, 222, 233, 253, 165, 230, 24, 116, 86, 46, 220, 4, 49, 231, 100, 162, 153, 198, 0, 99, 139, 84, 9, 192, 44, 129, 156, 81, 253, 203, 92, 254, 30, 219, 225, 83, 66, 67, 94, 57, 225, 140, 96, 186, 34, 30, 103, 25, 206, 175, 148, 193, 173, 250, 91, 105, 139, 165, 185, 51, 113},
  // python -c 'import random; print([random.randint(0,255) for _ in range(798)])'
  std::vector<unsigned char>{45, 25, 218, 184, 186, 212, 50, 206, 145, 199, 220, 59, 245, 30, 107, 149, 251, 191, 110, 42, 133, 1, 41, 98, 252, 21, 219, 101, 151, 148, 152, 214, 96, 146, 103, 232, 139, 243, 169, 191, 185, 253, 216, 214, 14, 93, 221, 70, 9, 4, 92, 248, 131, 30, 23, 39, 156, 42, 94, 136, 228, 56, 208, 174, 204, 108, 178, 94, 165, 178, 166, 206, 97, 166, 91, 92, 130, 126, 244, 19, 156, 221, 66, 5, 193, 196, 17, 100, 252, 9, 5, 238, 244, 99, 46, 56, 195, 208, 12, 32, 59, 138, 119, 129, 58, 40, 43, 79, 95, 109, 77, 4, 249, 241, 174, 160, 26, 0, 152, 197, 34, 141, 72, 121, 245, 207, 144, 159, 159, 206, 49, 94, 63, 206, 47, 243, 237, 167, 38, 89, 120, 31, 51, 54, 0, 13, 107, 155, 133, 40, 89, 10, 237, 31, 55, 128, 241, 111, 94, 96, 72, 57, 12, 245, 179, 90, 193, 206, 20, 120, 117, 24, 83, 25, 228, 177, 123, 46, 2, 72, 198, 109, 24, 49, 155, 173, 217, 81, 108, 156, 84, 168, 1, 97, 9, 186, 224, 20, 45, 81, 105, 121, 72, 98, 85, 172, 36, 77, 60, 97, 13, 101, 113, 98, 47, 219, 114, 68, 128, 101, 26, 231, 243, 133, 43, 214, 11, 56, 11, 206, 71, 82, 128, 34, 62, 98, 92, 186, 104, 45, 238, 77, 52, 86, 16, 138, 65, 247, 156, 143, 8, 71, 26, 211, 160, 209, 235, 76, 234, 158, 69, 207, 87, 38, 52, 111, 107, 84, 204, 166, 225, 169, 78, 163, 204, 100, 55, 85, 73, 182, 227, 26, 36, 127, 6, 164, 208, 7, 254, 252, 3, 202, 16, 164, 142, 189, 112, 201, 115, 12, 254, 123, 245, 188, 32, 152, 160, 236, 225, 172, 222, 115, 35, 124, 201, 13, 164, 122, 35, 181, 152, 16, 33, 143, 40, 6, 4, 157, 86, 137, 116, 108, 184, 162, 219, 149, 62, 225, 19, 88, 143, 19, 233, 115, 36, 239, 237, 43, 178, 100, 119, 117, 96, 107, 208, 164, 21, 233, 250, 134, 227, 8, 140, 165, 68, 201, 45, 181, 232, 144, 86, 218, 16, 128, 9, 111, 224, 62, 63, 208, 99, 36, 198, 155, 240, 65, 178, 149, 63, 136, 176, 50, 178, 147, 119, 66, 69, 195, 147, 140, 44, 24, 235, 168, 99, 41, 35, 209, 110, 28, 57, 217, 53, 189, 172, 210, 180, 222, 146, 211, 102, 23, 220, 2, 4, 151, 29, 209, 161, 20, 145, 20, 129, 50, 79, 11, 44, 229, 145, 129, 48, 92, 137, 100, 21, 244, 160, 7, 37, 4, 170, 159, 223, 190, 190, 16, 186, 5, 112, 175, 85, 210, 131, 9, 62, 189, 215, 3, 124, 89, 107, 222, 181, 188, 229, 170, 1, 10, 178, 244, 168, 2, 104, 15, 10, 172, 224, 207, 210, 241, 128, 157, 64, 109, 198, 220, 26, 38, 249, 178, 96, 56, 27, 67, 164, 121, 10, 117, 100, 72, 181, 40, 109, 148, 45, 126, 69, 76, 128, 62, 204, 83, 44, 42, 9, 79, 19, 137, 171, 198, 218, 125, 3, 82, 45, 94, 183, 74, 19, 140, 243, 152, 200, 139, 190, 203, 70, 165, 169, 91, 100, 79, 51, 206, 193, 10, 206, 162, 203, 17, 225, 236, 177, 98, 218, 233, 228, 104, 21, 190, 90, 3, 91, 8, 207, 65, 13, 107, 51, 48, 165, 199, 118, 61, 31, 44, 233, 192, 222, 56, 59, 228, 219, 210, 166, 248, 203, 129, 160, 5, 69, 43, 134, 147, 112, 206, 245, 226, 173, 144, 222, 90, 85, 130, 82, 244, 147, 126, 136, 98, 141, 68, 61, 88, 92, 211, 158, 114, 9, 189, 128, 180, 118, 231, 0, 155, 43, 163, 112, 217, 66, 148, 197, 145, 224, 99, 180, 120, 224, 14, 211, 55, 195, 234, 47, 118, 175, 158, 97, 5, 145, 40, 36, 219, 111, 183, 101, 20, 26, 48, 234, 17, 136, 103, 231, 188, 71, 40, 207, 164, 109, 247, 106, 246, 177, 90, 199, 160, 198, 33, 32, 244, 162, 23, 143, 236, 152, 236, 123, 29, 252, 188, 209, 156, 174, 109, 44, 75, 198, 100, 152, 244, 138, 209, 147, 218, 199, 200, 30, 50, 92, 191, 235, 39, 181, 100, 25, 32, 247, 70, 216, 5, 227, 231, 168, 252, 200, 166, 186, 123, 115, 104, 111, 225, 26, 207, 224, 190, 49, 32, 171, 158, 21, 74, 135, 144, 100, 174, 242, 112, 7, 204, 154, 31, 189, 239, 141, 29, 241, 62, 217, 92, 40, 23, 155, 138, 251, 204, 159, 53, 246, 127, 53, 250, 22, 143, 213, 25, 162, 142, 109, 239, 171, 90, 49, 90, 140, 33},
#endif
};

const auto nonces = std::vector<std::vector<unsigned char>>{
#if SIZE >= 1
  std::vector<unsigned char>{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  std::vector<unsigned char>{255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},
#endif
#if SIZE >= 2
  std::vector<unsigned char>{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
  std::vector<unsigned char>{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23},
#endif
};

const auto keys = std::vector<std::vector<unsigned char>>{
#if SIZE >= 1
  std::vector<unsigned char>{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  std::vector<unsigned char>{255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},
#endif
#if SIZE >= 2
  std::vector<unsigned char>{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
  std::vector<unsigned char>{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31},
#endif
};

int main() {
  if (sodium_init() == -1) {
    return 1;
  }

  int count = 0;

  std::cout << std::endl;
  std::cout << "# XChaCha20Poly1305 generated by libsodium via https://github.com/webmaster128/xchacha20poly1305-testvectors" << std::endl;

  for (const auto message: messages) {
    for (const auto additional_data: additional_datas) {
      for (const auto nonce: nonces) {
        for (const auto key: keys) {
          ++count;
          unsigned char ciphertext[message.size() + crypto_aead_xchacha20poly1305_ietf_ABYTES];
          unsigned long long ciphertext_len;

          crypto_aead_xchacha20poly1305_ietf_encrypt(
              ciphertext, &ciphertext_len,
              message.data(), message.size(),
              additional_data.data(), additional_data.size(),
              NULL,
              nonce.data(),
              key.data());

          {
              // plausability check
              unsigned char decrypted[message.size()];
              unsigned long long decrypted_len;
              if (crypto_aead_xchacha20poly1305_ietf_decrypt(
                  decrypted, &decrypted_len,
                  NULL,
                  ciphertext, ciphertext_len,
                  additional_data.data(),
                  additional_data.size(),
                  nonce.data(), key.data()) != 0) {
                  throw std::logic_error("Error during decryption");
              }
          }

          std::cout << std::endl;

          std::cout << "Key = ";
          print_vector(key);
          std::cout << std::endl;

          std::cout << "AD = ";
          print_vector(additional_data);
          std::cout << std::endl;

          std::cout << "Nonce = ";
          print_vector(nonce);
          std::cout << std::endl;

          std::cout << "In = ";
          print_vector(message);
          std::cout << std::endl;

          std::cout << "Out = ";
          print_array(ciphertext, ciphertext_len);
          std::cout << std::endl;
        }
      }
    }
  }

  std::cerr << count << " tests generated" << std::endl;
}
